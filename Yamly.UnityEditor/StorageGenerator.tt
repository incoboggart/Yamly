<#@ template language="C#" visibility="internal"  inherits="ProxyCodeGenerator" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Yamly.Proxy" #>
<#Initialize();#>
<#+
    public void WriteStorageType(RootDefinition root)
    {
        var storageTypeName = GetStorageTypeName(root);
#>
    public sealed class <#=storageTypeName#>
	    : StorageBase
	{
	    public <#=storageTypeName#>()
		{
		    Group = "<#=root.Group#>";
		}
<#+
        
        var attribute = root.Root.GetSingle<ConfigDeclarationAttributeBase>();
        if (attribute is SingleConfig)
        {
            SingleTypeContent(root);
        } 
        else if (attribute is ConfigList)
        {
            ListTypeContent(root);
        }
		else if (attribute is ConfigDictionary)
        {
            DictionaryTypeContent(root);
        }
#>
    }
<#+
    }

    public void WriteUsings(IEnumerable<string> namespaces)
    {
        foreach (var ns in namespaces)
        {
#>
using <#=ns#>;
<#+
        }
    }

    public void WriteNamespace(string ns, Action generateContent)
    {
#>
namespace <#=ns#>
{<#+
        generateContent();#>
}<#+
    }
#>

<#+
    const string proxy = "_proxy";
    const string cache = "_cache";
    const string init = "_cached";    
#>

<#+
    private void SingleTypeContent(RootDefinition root)
    {
        var storageTypeName = GetStorageTypeName(root);
        var originTypeName = root.Root.Name;
        var proxyTypeName = GetProxyTypeName(root.Root);
        PrivateGenericFieldDeclaration(proxy, proxyTypeName, true);
        PrivateGenericFieldDeclaration(cache, originTypeName, false);
#>
        public <#=originTypeName#> Value
		{
		    get 
			{ 
			    if(!<#=init#>)
				{
				    <#=cache#> = <#=proxy#>;
				    <#=init#> = true;
				}
			
			    return <#=proxy#>; 
			}
			set 
			{ 
			    <#=proxy#> = value;
				<#=cache#> = value;
				<#=init#> = true;
			}
		}

		public static implicit operator <#=originTypeName#>(<#=storageTypeName#> storage)
		{
		    return storage == null ? default(<#=originTypeName#>) : storage.Value;
		}
<#+
    }
#>

<#+
    private void ListTypeContent(RootDefinition root)
    {
        var storageTypeName = GetStorageTypeName(root);
        var originTypeName = root.Root.Name;
        var listOriginTypeName = GetListTypeName(originTypeName, false);
        var proxyTypeName = GetProxyTypeName(root.Root);
        var listProxyTypeName = GetListTypeName(proxyTypeName, true);
		PrivateGenericFieldDeclaration(proxy, listProxyTypeName, true);
        PrivateGenericFieldDeclaration(cache, listOriginTypeName, false);

        var listType = typeof(List<>).MakeGenericType(root.Root);

        var proxyToOrigin = GetTypeConversion(listType, proxy, false, false);
        var originToProxy = GetTypeConversion(listType, "value", true, true);
#>
        public <#=listOriginTypeName#> Value
		{
		    get 
			{ 
			    if(!<#=init#>)
				{
				    <#=cache#> = <#=proxyToOrigin#>;
				    <#=init#> = true;
				}
			
			    return <#=proxy#>; 
			}
			set 
			{ 
			    <#=proxy#> = <#=originToProxy#>;
				<#=cache#> = value;
				<#=init#> = true;
			}
		}

		public static implicit operator <#=listOriginTypeName#>(<#=storageTypeName#> storage)
		{
		    return storage == null ? default(<#=listOriginTypeName#>) : storage.Value;
		}
<#+
    }
#>

<#+
    private void DictionaryTypeContent(RootDefinition root)
    {
        var storageTypeName = GetStorageTypeName(root);
        var proxyTypeName = GetProxyTypeName(root.Root);

        var keyType = GetKeyType(root.Root);
        var valueType = root.Root;
        var dictionaryType = typeof(Dictionary<,>).MakeGenericType(keyType, valueType);
		var dictionaryTypeName = GetDictionaryTypeName(keyType.Name, valueType.Name);

		PrivateGenericFieldDeclaration($"{proxy}Keys", $"{GetProxyTypeName(keyType)}[]", true);
		PrivateGenericFieldDeclaration($"{proxy}Values", $"{GetProxyTypeName(valueType)}[]", true);
        PrivateGenericFieldDeclaration(cache, GetDictionaryTypeName(keyType.Name, valueType.Name), false);

        var originToProxyKey = GetTypeConversion(keyType, "k", false, false);
        var originToProxyValue = GetTypeConversion(valueType, "v", false, false);
        var proxyToOriginKey = GetTypeConversion(keyType, "value", true, true);
        var proxyToOriginValue = GetTypeConversion(valueType, "value", true, true);
#>
        public <#=dictionaryTypeName#> Value
		{
		    get 
			{ 
			    if(!<#=init#>)
				{
				    <#=cache#> = SerializationUtility.Convert(<#=proxy#>Keys, <#=proxy#>Values, key => <#=proxyToOriginKey#>, value => <#=proxyToOriginValue#>);
				    <#=init#> = true;
				}
			
			    return <#=proxy#>; 
			}
			set 
			{ 
			    SerializationUtility.Convert(value, k => <#=originToProxyKey#>, v => <#=originToProxyValue #>, out <#=proxy#>Keys, out <#=proxy#>Values);
				<#=cache#> = value;
				<#=init#> = true;
			}
		}

		public static implicit operator <#=dictionaryTypeName#>(<#=storageTypeName#> storage)
		{
		    return storage == null ? default(<#=dictionaryTypeName#>) : storage.Value;
		}
<#+
    }
#>